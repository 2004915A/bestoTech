@inject HttpClient _client
@inject NavigationManager _navManager
<EditForm Model="@review" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Title: </label>
            <div>
                <InputText @bind-Value="review.Title" class="form-control" />
                <ValidationMessage For="@( () => review.Title)" />
            </div>

        </div>

        <div class="form-group">
            <label>Body: </label>
            <div>
                <InputText @bind-Value="review.Description" class="form-control" />
                <ValidationMessage For="@( () => review.Description)" />
            </div>
        </div>
        <div class="form-group">
            <label>Product: </label>
            <div>
                <InputSelect @bind-Value="review.ProductId" class="form-control">

                    @if (Products != null)
                    {
                        <option value="">--- Select a Product ---</option>
                        foreach (var product in Products)
                        {
                            <option value="@product.Id">@product.Name</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@( () => review.ProductId)" />
            </div>

        </div>
        <div class="form-group">
            <label>Rating: </label>
            <div>
                <InputSelect @bind-Value="review.Rating" class="form-control">
                    <option value="">--- Rating out of 5 ---</option>
                    @if (Products != null)
                    {
                        foreach (int rating in ratings)
                        {
                            <option value="@rating">@rating</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@( () => review.Rating)" />
            </div>

        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="reviews" />
</EditForm>

@code {
    private int[] ratings = { 0, 1, 2, 3, 4, 5 };

    private IList<Product> Products;


    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Review review { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}

