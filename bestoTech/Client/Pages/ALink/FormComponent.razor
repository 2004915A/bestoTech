@inject HttpClient _client

<EditForm Model="@alink" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>URL: </label>
            <div>
                <InputText @bind-Value="alink.Link" class="form-control" />
                <ValidationMessage For="@( () => alink.Link)" />
            </div>

        </div>
        <div class="form-group">
            <label>Price </label>
            <div>
                <InputNumber @bind-Value="alink.Price" class="form-control" />
                <ValidationMessage For="@( () => alink.Price)" />
            </div>

        </div>

        <div class="form-group">
            <label>Store: </label>
            <div>
                <InputSelect @bind-Value="alink.AStoreId" class="form-control">

                    @if (AStores != null)
                    {
                        <option value="">--- Select a Brand ---</option>
                        foreach (var astore in AStores)
                        {
                            <option value="@astore.Id">@astore.Name</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@( () => alink.AStoreId)" />
            </div>

        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="alinks" />
</EditForm>

@code {
    private IList<AStore> AStores;

    protected async override Task OnInitializedAsync()
    {
        AStores = await _client.GetFromJsonAsync<List<AStore>>($"{Endpoints.AStoresEndpoint}");

    }

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public ALink alink { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}

