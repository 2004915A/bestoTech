@inject HttpClient _client
@inject NavigationManager _navManager
<EditForm Model="@brandcategory" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Add Category to List </label>
            <div>
                <InputSelect @bind-Value="brandcategory.Categories" class="form-control">

                    @if (Categories != null)
                    {
                        <option value="">--- Select Categories ---</option>
                        foreach (var category in Categories)
                        {
                            <option value="@brandcategory.Id">@category.Name</option>
                            //Categories.Remove(cate)
                        }
                    }
                    <ValidationMessage For="@( () => brandcategory.Id)" />
                </InputSelect>
            </div>
        </div>
    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="brandcategories" />
</EditForm>

@code {
    private IList<Category> Categories;
    private List<Category> CatList = new List<Category>();


    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");

    }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public BrandCategory brandcategory { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}

