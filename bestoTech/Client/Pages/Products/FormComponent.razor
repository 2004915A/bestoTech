@inject HttpClient _client
@inject NavigationManager _navManager
<EditForm Model="@product" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Name: </label>
            <div>
                <InputText @bind-Value="product.Name" class="form-control" />
                <ValidationMessage For="@( () => product.Name)" />
            </div>

        </div>

        <div class="form-group">
            <label>Description: </label>
            <div>
                <InputText @bind-Value="product.Description" class="form-control" />
                <ValidationMessage For="@( () => product.Description)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand: </label>
            <div>
                <InputSelect @bind-Value="product.BrandId" class="form-control">

                    @if (Brands != null)
                    {
                        <option value="">--- Select a Brand ---</option>
                        foreach (var brand in Brands)
                        {
                            <option value="@brand.Id">@brand.Name</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@( () => product.BrandId)" />
            </div>

        </div>

        <div class="form-group">
            <label>Category: </label>
            <div>
                <InputSelect @bind-Value="product.CategoryId" class="form-control">

                    @if (Brands != null)
                    {
                        <option value="">--- Select a Category ---</option>
                        foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@( () => product.CategoryId)" />
            </div>

        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="products" />
</EditForm>

@code {
    private IList<Brand> Brands;
    private IList<Category> Categories;

    protected async override Task OnInitializedAsync()
    {
        Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");

    }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Product product { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}

